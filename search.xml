<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my first blog</title>
    <url>/2022/02/22/my-first-blog/</url>
    <content><![CDATA[<p>搭建个人博客的完整过程：</p>
<span id="more"></span>


<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><h2 id="1-1-git"><a href="#1-1-git" class="headerlink" title="1.1 git"></a>1.1 git</h2><h2 id="1-2-nodejs"><a href="#1-2-nodejs" class="headerlink" title="1.2 nodejs"></a>1.2 nodejs</h2><h2 id="1-3-hexo"><a href="#1-3-hexo" class="headerlink" title="1.3 hexo"></a>1.3 hexo</h2><pre><code>    1.安装命令：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure>
<pre><code>    2.测试是否安装成功
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>
<pre><code>    3.安装hexo依赖
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<pre><code>    常用的hexo的基本命令
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>

<h1 id="2-搭建博客"><a href="#2-搭建博客" class="headerlink" title="2. 搭建博客"></a>2. 搭建博客</h1><h2 id="2-1-创建一个文件夹用于保存博客，并进入这个文件夹中初始化个人博客"><a href="#2-1-创建一个文件夹用于保存博客，并进入这个文件夹中初始化个人博客" class="headerlink" title="2.1 创建一个文件夹用于保存博客，并进入这个文件夹中初始化个人博客"></a>2.1 创建一个文件夹用于保存博客，并进入这个文件夹中初始化个人博客</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h2 id="2-2-生成静态网页"><a href="#2-2-生成静态网页" class="headerlink" title="2.2 生成静态网页"></a>2.2 生成静态网页</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<pre><code>预览
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h2 id="2-3-部署到github"><a href="#2-3-部署到github" class="headerlink" title="2.3 部署到github"></a>2.3 部署到github</h2><pre><code>1. 新建一个github仓库 ，命名为：用户名.github.io
2. 在博客存放目录在下找到_config.yml文件并编辑
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:LWWm/LWWm.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<pre><code>3. 发布到github，之后就可以在浏览器通过https://lwwm.github.io/访问
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h2 id="2-4-编写博客"><a href="#2-4-编写博客" class="headerlink" title="2.4 编写博客"></a>2.4 编写博客</h2><pre><code>1. 新建名称为“my first blog”的博客
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &#x27;my first blog&#x27;</span><br></pre></td></tr></table></figure>
<pre><code>可以看到在Blogs\source\_posts目录下新生成了对应的.md文件，在其中可以编辑博客内容。
2. 编写完成之后可以部署到github
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g      //生成html文件</span><br><span class="line">hexo d      //上传到github</span><br></pre></td></tr></table></figure>
<pre><code>3. 再次访问https://lwwm.github.io可以看到效果
</code></pre>
<h1 id="3-曾经遇到的问题："><a href="#3-曾经遇到的问题：" class="headerlink" title="3. 曾经遇到的问题："></a>3. 曾经遇到的问题：</h1><h2 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h2><pre><code>博客上传到github的时候提示错误：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>
<pre><code>解决方法：
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>


<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.cnblogs.com/chenlove/p/15058170.html">link</a>  <a href="https://www.cnblogs.com/chenlove/p/15058170.html">https://www.cnblogs.com/chenlove/p/15058170.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><span id="more"></span>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>力扣刷题笔记，8. 字符串整数转换</title>
    <url>/2022/02/22/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9A8-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9A8/</url>
    <content><![CDATA[<h3 id="针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。"><a href="#针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。" class="headerlink" title="针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。"></a>针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。</h3><span id="more"></span>

<h2 id="1-自动机"><a href="#1-自动机" class="headerlink" title="1.自动机"></a>1.自动机</h2><p>&amp;ensp;&amp;ensp;字符串中的数字为结果的条件是：这个数字（包含符号）的前面只有空格<br>&amp;emsp;每次输入的字符包括四种情况：空格“ ”，符号“+&#x2F;-”，数字，其他。<br>同时对应有四种状态：<br>&amp;emsp;&amp;emsp; -开始状态(start)，即尚未读取到符号或者数字，只读取到空格或未读取<br>&amp;emsp;&amp;emsp; -符号状态(signed)，即在开始状态下读取到一个符号<br>&amp;emsp;&amp;emsp; -拼数字状态(in_number)，即在开始状态或者符号状态或者数字状态下又读取到一个数字<br>&amp;emsp;&amp;emsp; -结束状态(end)，即已经读完数字或者在开始状态下即读取到非数字且非符号，或者符号状态读取到非数字。</p>
<p>&amp;emsp;状态转移表如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>“ “</th>
<th>+&#x2F;-</th>
<th>number</th>
<th>other</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>start</td>
<td>sighed</td>
<td>in_number</td>
<td>end</td>
</tr>
<tr>
<td>signed</td>
<td>end</td>
<td>end</td>
<td>in_number</td>
<td>end</td>
</tr>
<tr>
<td>in_number</td>
<td>end</td>
<td>end</td>
<td>in_number</td>
<td>end</td>
</tr>
<tr>
<td>end</td>
<td>end</td>
<td>end</td>
<td>end</td>
<td>end</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int myAtoi(String s) &#123;</span><br><span class="line">        Automation automation = new Automation();</span><br><span class="line">        for (char c : s.toCharArray()) &#123;</span><br><span class="line">            automation.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        return (int) (automation.sign * automation.ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Automation &#123;</span><br><span class="line">    enum States&#123;</span><br><span class="line">        START, SIGNED, IN_NUMBER, END;</span><br><span class="line">    &#125;</span><br><span class="line">    public int sign = 1;    // 结果的符号，如果读到有效的“-”,则变为-1</span><br><span class="line">    public long ans = 0;    // 用于存放得到的结果,始终是正数,long类型为了防止结果溢出</span><br><span class="line">    private States state = States.START;    // 表示状态，默认为开始状态</span><br><span class="line">    private Map&lt;States,States[]&gt; table = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    public Automation() &#123;</span><br><span class="line">        // table 赋值,数组中对应输入分别为 空格“ ”，符号“+/-”，数字，其他 时的次状态</span><br><span class="line">        table.put(States.START, new States[] &#123;States.START, States.SIGNED, States.IN_NUMBER, States.END&#125;);</span><br><span class="line">        table.put(States.SIGNED, new States[] &#123;States.END, States.END, States.IN_NUMBER, States.END&#125;);</span><br><span class="line">        table.put(States.IN_NUMBER, new States[] &#123;States.END, States.END, States.IN_NUMBER, States.END&#125;);</span><br><span class="line">        table.put(States.END, new States[] &#123;States.END, States.END, States.END, States.END&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void get(char c) &#123;</span><br><span class="line">        // 根据当前状态和输入得到次状态</span><br><span class="line">        state = table.get(state)[getValue(c)];</span><br><span class="line">        // 只有次状态为数字或者符号的时候才会影响结果</span><br><span class="line">        if (state == States.IN_NUMBER) &#123;</span><br><span class="line">            ans = ans * 10 + c - &#x27;0&#x27;;</span><br><span class="line">            // 分正负结果分别处理结果溢出 </span><br><span class="line">            if (sign == 1) &#123;</span><br><span class="line">                ans = Math.min(ans, (long)Integer.MAX_VALUE);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                ans = Math.min(ans, -(long)Integer.MIN_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (state == States.SIGNED) &#123;</span><br><span class="line">            sign = c == &#x27;+&#x27; ? 1 : -1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getValue(char c) &#123;</span><br><span class="line">        if (c == &#x27; &#x27;)</span><br><span class="line">            return 0;</span><br><span class="line">        if (c == &#x27;+&#x27; || c == &#x27;-&#x27;)</span><br><span class="line">            return 1;</span><br><span class="line">        if (Character.isDigit(c))</span><br><span class="line">            return 2;</span><br><span class="line">        return 3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-直接模拟"><a href="#2-直接模拟" class="headerlink" title="2. 直接模拟"></a>2. 直接模拟</h2><p>&amp;emsp;先使用API去掉前导和尾部空白，对剩下的进行判断：</p>
<ol>
<li>如果开始是数字，则合法，修改结果，指针进一继续判断；</li>
<li>如果开始是符号，则合法，修改结果符号，指针进一继续判断；</li>
</ol>
<ul>
<li>如果是数字，则合法，修改结果，指针进一继续判断;</li>
<li>如果是其他，则非法，结束；</li>
</ul>
<ol start="3">
<li>如果是其他，则非法，结束。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public int myAtoi(String s) &#123;</span><br><span class="line">        String s1 = s.trim();   // 去掉s的前导和尾部空白</span><br><span class="line">        if (s1.length() &lt; 1)</span><br><span class="line">            return 0;</span><br><span class="line">        long ans = 0;           // long 类型防止溢出，恒为正值</span><br><span class="line">        int index = 0;          // 当前下标</span><br><span class="line">        int sign = 1;           // 符号</span><br><span class="line"></span><br><span class="line">        // s1 的首个字符三种可能</span><br><span class="line">        // 如果是+/-则修改符号，并下标右移</span><br><span class="line">        if (s1.charAt(index) == &#x27;+&#x27;) &#123;</span><br><span class="line">            sign = 1;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125; else if (s1.charAt(index) == &#x27;-&#x27;) &#123;</span><br><span class="line">            sign = -1;</span><br><span class="line">            index ++;</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果是数字或者其他</span><br><span class="line">        for (int i = index; i &lt; s1.length(); i++) &#123;</span><br><span class="line">            char c = s1.charAt(i);</span><br><span class="line">            // 如果是数字</span><br><span class="line">            if (Character.isDigit(c)) &#123;</span><br><span class="line">                ans = ans * 10 + c - &#x27;0&#x27;;</span><br><span class="line">                // 分类处理溢出</span><br><span class="line">                if (sign == 1) &#123;</span><br><span class="line">                    ans = Math.min(ans, Integer.MAX_VALUE);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ans = Math.min(ans,-(long)Integer.MIN_VALUE);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 如果是其他则结束返回结果</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return (int) (sign * ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>力扣刷题笔记</tag>
      </tags>
  </entry>
</search>
