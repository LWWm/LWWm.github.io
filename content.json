{"meta":{"title":"LWWm","subtitle":"","description":"若能美梦成真，何羡妖魔鬼神","author":"LWWm","url":"http://example.com","root":"/"},"pages":[{"title":"tags","date":"2022-02-23T08:07:41.000Z","updated":"2022-02-23T08:08:34.280Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-02-23T08:08:43.000Z","updated":"2022-02-23T08:08:43.460Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"力扣刷题笔记，8. 字符串整数转换","slug":"力扣刷题笔记：8-力扣刷题笔记：8","date":"2022-02-22T13:03:21.000Z","updated":"2022-02-23T06:12:49.845Z","comments":true,"path":"2022/02/22/力扣刷题笔记：8-力扣刷题笔记：8/","link":"","permalink":"http://example.com/2022/02/22/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9A8-%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%EF%BC%9A8/","excerpt":"针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。","text":"针对力扣第8题的思路和程序，重点学习JAVA实现自动机的写法。 1.自动机&amp;ensp;&amp;ensp;字符串中的数字为结果的条件是：这个数字（包含符号）的前面只有空格&amp;emsp;每次输入的字符包括四种情况：空格“ ”，符号“+&#x2F;-”，数字，其他。同时对应有四种状态：&amp;emsp;&amp;emsp; -开始状态(start)，即尚未读取到符号或者数字，只读取到空格或未读取&amp;emsp;&amp;emsp; -符号状态(signed)，即在开始状态下读取到一个符号&amp;emsp;&amp;emsp; -拼数字状态(in_number)，即在开始状态或者符号状态或者数字状态下又读取到一个数字&amp;emsp;&amp;emsp; -结束状态(end)，即已经读完数字或者在开始状态下即读取到非数字且非符号，或者符号状态读取到非数字。 &amp;emsp;状态转移表如下： “ “ +&#x2F;- number other start start sighed in_number end signed end end in_number end in_number end end in_number end end end end end end 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455class Solution &#123; public int myAtoi(String s) &#123; Automation automation = new Automation(); for (char c : s.toCharArray()) &#123; automation.get(c); &#125; return (int) (automation.sign * automation.ans); &#125;&#125;class Automation &#123; enum States&#123; START, SIGNED, IN_NUMBER, END; &#125; public int sign = 1; // 结果的符号，如果读到有效的“-”,则变为-1 public long ans = 0; // 用于存放得到的结果,始终是正数,long类型为了防止结果溢出 private States state = States.START; // 表示状态，默认为开始状态 private Map&lt;States,States[]&gt; table = new HashMap&lt;&gt;(); public Automation() &#123; // table 赋值,数组中对应输入分别为 空格“ ”，符号“+/-”，数字，其他 时的次状态 table.put(States.START, new States[] &#123;States.START, States.SIGNED, States.IN_NUMBER, States.END&#125;); table.put(States.SIGNED, new States[] &#123;States.END, States.END, States.IN_NUMBER, States.END&#125;); table.put(States.IN_NUMBER, new States[] &#123;States.END, States.END, States.IN_NUMBER, States.END&#125;); table.put(States.END, new States[] &#123;States.END, States.END, States.END, States.END&#125;); &#125; public void get(char c) &#123; // 根据当前状态和输入得到次状态 state = table.get(state)[getValue(c)]; // 只有次状态为数字或者符号的时候才会影响结果 if (state == States.IN_NUMBER) &#123; ans = ans * 10 + c - &#x27;0&#x27;; // 分正负结果分别处理结果溢出 if (sign == 1) &#123; ans = Math.min(ans, (long)Integer.MAX_VALUE); &#125; else &#123; ans = Math.min(ans, -(long)Integer.MIN_VALUE); &#125; &#125; else if (state == States.SIGNED) &#123; sign = c == &#x27;+&#x27; ? 1 : -1; &#125; &#125; public int getValue(char c) &#123; if (c == &#x27; &#x27;) return 0; if (c == &#x27;+&#x27; || c == &#x27;-&#x27;) return 1; if (Character.isDigit(c)) return 2; return 3; &#125;&#125; 2. 直接模拟&amp;emsp;先使用API去掉前导和尾部空白，对剩下的进行判断： 如果开始是数字，则合法，修改结果，指针进一继续判断； 如果开始是符号，则合法，修改结果符号，指针进一继续判断； 如果是数字，则合法，修改结果，指针进一继续判断; 如果是其他，则非法，结束； 如果是其他，则非法，结束。 1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123; public int myAtoi(String s) &#123; String s1 = s.trim(); // 去掉s的前导和尾部空白 if (s1.length() &lt; 1) return 0; long ans = 0; // long 类型防止溢出，恒为正值 int index = 0; // 当前下标 int sign = 1; // 符号 // s1 的首个字符三种可能 // 如果是+/-则修改符号，并下标右移 if (s1.charAt(index) == &#x27;+&#x27;) &#123; sign = 1; index ++; &#125; else if (s1.charAt(index) == &#x27;-&#x27;) &#123; sign = -1; index ++; &#125; // 如果是数字或者其他 for (int i = index; i &lt; s1.length(); i++) &#123; char c = s1.charAt(i); // 如果是数字 if (Character.isDigit(c)) &#123; ans = ans * 10 + c - &#x27;0&#x27;; // 分类处理溢出 if (sign == 1) &#123; ans = Math.min(ans, Integer.MAX_VALUE); &#125; else &#123; ans = Math.min(ans,-(long)Integer.MIN_VALUE); &#125; &#125; else &#123; // 如果是其他则结束返回结果 break; &#125; &#125; return (int) (sign * ans); &#125;&#125;","categories":[],"tags":[{"name":"力扣刷题笔记","slug":"力扣刷题笔记","permalink":"http://example.com/tags/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}]},{"title":"my first blog","slug":"my-first-blog","date":"2022-02-22T06:55:26.000Z","updated":"2022-02-22T08:16:32.848Z","comments":true,"path":"2022/02/22/my-first-blog/","link":"","permalink":"http://example.com/2022/02/22/my-first-blog/","excerpt":"搭建个人博客的完整过程：","text":"搭建个人博客的完整过程： 1. 环境准备1.1 git1.2 nodejs1.3 hexo 1.安装命令： 1npm install hexo -g 2.测试是否安装成功 1hexo -v 3.安装hexo依赖 1npm install --save hexo-deployer-git 常用的hexo的基本命令 1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 2. 搭建博客2.1 创建一个文件夹用于保存博客，并进入这个文件夹中初始化个人博客1hexo init 2.2 生成静态网页1hexo g 预览 1hexo s 2.3 部署到github1. 新建一个github仓库 ，命名为：用户名.github.io 2. 在博客存放目录在下找到_config.yml文件并编辑 1234deploy: type: git repository: git@github.com:LWWm/LWWm.github.io.git branch: main 3. 发布到github，之后就可以在浏览器通过https://lwwm.github.io/访问 1hexo d 2.4 编写博客1. 新建名称为“my first blog”的博客 1hexo new &#x27;my first blog&#x27; 可以看到在Blogs\\source\\_posts目录下新生成了对应的.md文件，在其中可以编辑博客内容。 2. 编写完成之后可以部署到github 12hexo g //生成html文件hexo d //上传到github 3. 再次访问https://lwwm.github.io可以看到效果 3. 曾经遇到的问题：3.1博客上传到github的时候提示错误： 1Deployer not found: git 解决方法： 1npm install --save hexo-deployer-git 参考link https://www.cnblogs.com/chenlove/p/15058170.html","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-02-22T06:27:19.784Z","updated":"2022-02-22T08:06:07.088Z","comments":true,"path":"2022/02/22/hello-world/","link":"","permalink":"http://example.com/2022/02/22/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"力扣刷题笔记","slug":"力扣刷题笔记","permalink":"http://example.com/tags/%E5%8A%9B%E6%89%A3%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}]}